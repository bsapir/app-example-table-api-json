AWSTemplateFormatVersion: 2010-09-09

Description: Build Kinesis Analytics Sample App Example

Parameters:
  FlinkVersion:
    Description: Flink version to build
    Type: String
    Default: 1.6.2
    AllowedPattern: \d\.\d\.\d
  AppGithubAccount:
    Description: GitHub account name
    Type: String
    Default: my-github-account
  SourceRepo:
    Description: Source Code repository name
    Type: String
    Default: app-example
  SourceBranch:
    Description: Source Code repository branch
    Type: String
    Default: table-api-json 
  Parallelism:
    Description: Parallelism to use within flink job (Max is 8)
    Type: String
    Default: 2
    AllowedPattern: 1|2|3|4|5|6|7|8
Outputs:
  ArtifactBucket:
    Description: Bucket containing the compiled artifacts
    Value: !GetAtt ArtifactBucket.DomainName

  KinesisAnalyticsJarCopyCommand:
    Description: Command for copying the generated jar files
    Value: !Sub aws s3 cp s3://${ArtifactBucket}/artifacts/*.jar .

Resources:
  BuildPipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: DownloadSources
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: FlinkSourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              OutputArtifacts:
                - Name: FlinkSource
              Configuration:
                S3Bucket: !Ref ArtifactBucket
                S3ObjectKey: sources/flink-src.zip
              RunOrder: 1
            - Name: SampleArtifactsSourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              OutputArtifacts:
                - Name: SampleArtifactsSource
              Configuration:
                S3Bucket: !Ref ArtifactBucket
                S3ObjectKey: sources/kinesis-analytics-app-example.zip
              RunOrder: 2
        - Name: Build
          Actions:
            - Name: BuildKinesisConnector
              InputArtifacts:
                - Name: FlinkSource
              OutputArtifacts:
                - Name: KinesisConnectorOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref KinesisConnectorBuildProject
              RunOrder: 1
            - Name: BuildKinesisAnalyticsSample
              InputArtifacts:
                - Name: SampleArtifactsSource
              OutputArtifacts:
                - Name: KinesisAnalyticsSample
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref KinesisAnalyticsSampleBuildProject
              RunOrder: 2

      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket

  DownloadSources:
    Type: Custom::DownloadSources
    Properties:
      ServiceToken: !GetAtt DownloadSourcesFunction.Arn

  DownloadSourcesFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          import boto3
          import urllib2
          import cfnresponse

          def handler(event, context):
            s3 = boto3.client('s3')

            flink = urllib2.urlopen('https://github.com/apache/flink/archive/release-${FlinkVersion}.zip')
            s3.put_object(Bucket='${ArtifactBucket}',Key='sources/flink-src.zip',Body=flink.read())

            runtime_artifacts = urllib2.urlopen('https://github.com/${AppGithubAccount}/${SourceRepo}/archive/${SourceBranch}.zip')
            s3.put_object(Bucket='${ArtifactBucket}',Key='sources/kinesis-analytics-app-example.zip',Body=runtime_artifacts.read())

            cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Runtime: python2.7
      Timeout: 60


  SampleStreamProducerPutFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRoleForStreamProducer.Arn
      Code:
        ZipFile: !Sub |
          import json
          import decimal
          import random
          from datetime import datetime
          import time
          import uuid
          import boto3
          def handler(event, context):
              
                  
              client = boto3.client('kinesis')
              clientCW = boto3.client('cloudwatch')
              
              streamName = '${InputKinesisStream}'
              print('input stream: ' + streamName)
              startTime = datetime.utcnow()
              # simulat apps
              apps = ['snapchat', 'facebook', 'googleplus', 'chime', 'pong']

              for i in range(2000):
                evtTime = datetime.utcnow()
                if( abs((evtTime - startTime).seconds) > 120):
                    print("TIME UP")
                    break
                timeString = evtTime.strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
                appSessionId = str(uuid.uuid4())
                appVersion = 50 + random.randint(-20,30)
                #send new JSON format
                message ="{\"Ad Media Type\": \"Chrome1 419\", \"App Name\": \"" + apps[random.randint(0,len(apps)-1)] + "\", \"Timestamp\":\"" + timeString + "\",\"App Session ID\": \"" + appSessionId + "\", \"App Version\":" + str(appVersion) + "}"

                
                print("sending app message: " + message)
                response = client.put_record(
                    StreamName=streamName,
                    Data=message,
                    PartitionKey='nokey'
                )

                #tweak to simulate ingress rate, e.g. sleep every 100th record change modulo to 100
                if i % 1 == 0:
                  time.sleep(1)

              clientCW.put_metric_data(Namespace="MyKinesisAnalytics/AppRecords", MetricData=[{'MetricName': 'PutRecrodCount', 
                  'Dimensions': [ {'Name': 'Events', 'Value': '${AWS::Region}-${AWS::StackName}-java-app'}], 'Timestamp' : datetime.utcnow(), 'Value': i , 'Unit': 'None' }])

              print("Total messages sent " + str(i) )
              print('DONE')

              return {
                  'statusCode': 200,
                  'body': json.dumps('App events generated!')
              }
      Runtime: python2.7
      Timeout: 540

  KinesisConnectorBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/java:openjdk-8
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.1

          phases:
            pre_build:
              commands:
                - curl -s https://archive.apache.org/dist/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.tar.gz | tar xz -C /tmp/
            build:
              commands:
                - cd flink-*/flink-connectors/flink-connector-kinesis && /tmp/apache-maven-3.2.5/bin/mvn clean package -B -DskipTests -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -Pinclude-kinesis -Dhadoop-two.version=2.8.3
                - cd flink-*/flink-connectors/flink-connector-kinesis &&  /tmp/apache-maven-3.2.5/bin/mvn flatten:flatten -DflattenedPomFilename=pom.xml.flattened
            post_build:
              commands:
                - aws s3 cp --recursive --quiet --exclude '*' --include '*.jar' --include '*.pom*xml*' --exclude 'original-*' flink-*/flink-connectors/flink-connector-kinesis/target s3://${ArtifactBucket}/artifacts/

          artifacts:
            files:
              - flink-*/flink-connectors/flink-connector-kinesis/target/flink-connector-kinesis*.jar
              - flink-*/flink-connectors/flink-connector-kinesis/target/flink-connector-kinesis*.pom.xml
            discard-paths: yes
      TimeoutInMinutes: 30

  KinesisAnalyticsSampleBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/java:openjdk-8
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.1

          phases:
            pre_build:
              commands:
                - aws configure set s3.signature_version s3v4
                - aws s3 cp --quiet --recursive --exclude '*' --include 'flink-connector-kinesis*' s3://${ArtifactBucket}/artifacts/ /tmp
                - for jar in /tmp/flink-connector-kinesis*.jar; do mvn install:install-file -Dfile=$jar -DgroupId=org.apache.flink -DartifactId=flink-connector-kinesis_2.11 -Dversion=1.6.2 -Dpackaging=jar -DgeneratePom=true; done
            build:
              commands:
                - cd ${SourceRepo}*/ && mvn clean package -B -Dflink.version=${FlinkVersion}
            post_build:
              commands:
                - aws s3 cp --quiet --recursive --exclude '*' --include '*.jar' --exclude 'original-*' ${SourceRepo}*/target s3://${ArtifactBucket}/artifacts/
                - echo "cd ${SourceRepo}*/deploy-java-app; chmod +x ./create-app.sh; ./create-app.sh ${AWS::Region} ${AWS::StackName}-java-app ${AWS::AccountId} ${KinesisAnalyticsExecRole} ${InputKinesisStream} ${OutputKinesisStream} ${ArtifactBucket.Arn} app-example-1.0.jar ${Parallelism}"
                - cd ${SourceRepo}*/deploy-java-app; mkdir -p ~/.aws/models/kinesisanalyticsv2/2018-05-23/; cp service-2.json ~/.aws/models/kinesisanalyticsv2/2018-05-23 ; chmod +x ./create-app.sh; ./create-app.sh ${AWS::Region} ${AWS::StackName}-java-app ${AWS::AccountId} ${KinesisAnalyticsExecRole} ${InputKinesisStream} ${OutputKinesisStream} ${ArtifactBucket.Arn} app-example-1.0.jar ${Parallelism}
                - sleep 120
                - aws lambda invoke  --function-name ${SampleStreamProducerPutFunction} --invocation-type Event ./invoke.log
                - cd ..

          artifacts:
            files:
              - ${SourceRepo}*/target/*.jar
            discard-paths: yes
      TimeoutInMinutes: 30

  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled


  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}
                Effect: Allow
                Action:
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - cloudformation:*
                  - iam:PassRole

  KinesisAnalyticsExecRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [
            {
                "Effect": "Allow",
                "Principal": { "Service": [ "kinesisanalytics.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: arn:aws:logs:*:*:*
                Effect: Allow
                Action:
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
                - logs:PutLogEvents
              - Resource: !Sub ${InputKinesisStream.Arn}
                Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:ListShards
                  - kinesis:GetShardIterator
                  - kinesis:GetRecords
                  - kinesis:PutRecord
                  - kinesis:PutRecords
              - Resource: !Sub ${OutputKinesisStream.Arn}
                Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:ListShards
                  - kinesis:GetShardIterator
                  - kinesis:GetRecords
                  - kinesis:PutRecord
                  - kinesis:PutRecords
              - Resource: "*"
                Effect: Allow
                Action:
                  - kinesisanalytics:*
                  - cloudwatch:PutMetricData
                  - s3:Get*
                  - s3:List*
                  - s3:HeadBucket

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:PassRole
              - Resource: "*"
                Effect: Allow
                Action:
                  - kinesisanalytics:*
              - Resource: !Sub ${SampleStreamProducerPutFunction.Arn}
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}
                Effect: Allow
                Action:
                  - s3:ListBucket

  InputKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub Input-${AWS::StackName}
      ShardCount: !Sub ${Parallelism}

  OutputKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub Output-${AWS::StackName}
      ShardCount: !Sub ${Parallelism}

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Resource: arn:aws:logs:*:*:*
            Effect: Allow
            Action:
            - logs:*
          - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
            Effect: Allow
            Action:
              - s3:PutObject
 
  LambdaExecutionRoleForStreamProducer:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Resource: arn:aws:logs:*:*:*
            Effect: Allow
            Action:
            - logs:*
          - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
            Effect: Allow
            Action:
              - s3:PutObject
          - Resource: !Sub ${InputKinesisStream.Arn}
            Effect: Allow
            Action:
              - kinesis:DescribeStream
              - kinesis:ListShards
              - kinesis:GetShardIterator
              - kinesis:GetRecords
              - kinesis:PutRecord
              - kinesis:PutRecords
          - Resource: !Sub ${OutputKinesisStream.Arn}
            Effect: Allow
            Action:
              - kinesis:DescribeStream
              - kinesis:ListShards
              - kinesis:GetShardIterator
              - kinesis:GetRecords
              - kinesis:PutRecord
              - kinesis:PutRecords
          - Resource: "*"
            Effect: Allow
            Action:
              - cloudwatch:PutMetricData
